# To handle the result set inside a stored procedure, you use a cursor. It allows you to iterate a set of rows returned by a query and process each row accordingly.

# MySQL cursor is read-only, non-scrollable and asensitive.
  - Read-only: you cannot update data in the underlying table through the cursor.
  - Non-scrollable: you can only fetch rows in the order determined by the SELECT statement. You cannot fetch rows in the reversed order. In addition, you cannot skip rows or jump to a specific row in the result set.
  - Asensitive: there are two kinds of cursors: asensitive cursor and insensitive cursor. An asensitive cursor points to the actual data, whereas an insensitive cursor uses a temporary copy of the data.

# You can use MySQL cursors in stored procedures, stored functions, and triggers.
    - Syntax: DECLARE cursor_name CURSOR FOR SELECT_statement;
    - The cursor declaration must be after any variable declaration. If you declare a cursor before variables declaration, MySQL will issue an error. A cursor must always be associated with a SELECT statement.
    - you open the cursor by using the OPEN statement. The OPEN statement initializes the result set for the cursor
        - OPEN cursor_name;
    - Then, you use the FETCH statement to retrieve the next row pointed by the cursor and move the cursor to the next row in the result set.
        - FETCH cursor_name INTO variables list;
    - After that, you can check to see if there is any row available before fetching it. Finally, you call the CLOSE statement to deactivate the cursor and release the memory associated with it as follows.
        - CLOSE cursor_name;



# When working with MySQL cursor, you must also declare a NOT FOUND handler to handle the situation when the cursor could not find any row. Because each time you call the FETCH statement, the cursor attempts to read the next row in the result set. When the cursor reaches the end of the result set, it will not be able to get the data, and a condition is raised. The handler is used to handle this condition.
    - DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1;

    -The finished is a variable to indicate that the cursor has reached the end of the result set. Notice that the handler declaration must appear after variable and cursor declaration inside the stored procedures.





